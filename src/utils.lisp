(in-package :maximization.utils)

(enable-abackquote)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defun itoa (num)
    (prin1-to-string num))

  (defun concat (&rest strs)
    " Handy form of (CONCATENATE 'STRING ...)."
    (apply #'concatenate 'string strs))

  (defun xstringify (strxdsg)
    " STRXDSG is a string extended designator which is a string
     designator or a number. The function uses CL:STRING in the case of
     a string designator and CHIKU.UTIL:ITOA in the case of a number."
    (cond ((numberp strxdsg) (itoa strxdsg))
          (t (string strxdsg))))

  (defun gensym[] (&rest strxdsg-lst)
    " GENSYM[] returns an uninterned symbol which is generated by
     CL:GENSYM. Elements of STRXDSG-LST are stringified, concatatenated,
     wrapped by brackets([,]), and passed to GENSYM. Since that
     concatatenation is not a lightweight task, this function should not
     be used in performance sensitive cases.
     A string extended designator is a string designator or a number.
     String designators are stringified by CL:STRING function while a
     number is stringified by CHIKU.UTIL:ITOA."
    (gensym (apply #'concat `("[" ,@(mapcar #'xstringify strxdsg-lst) "]"))))

    (defun head (seq) (elt seq 0))

    (defun tail (seq &optional (n 1)) (subseq seq n)))

(defmacro with-gensyms ((&rest names) &body body)
  `(let ,(loop :for n :in names :collect
          (let ((name n))
            (if (atom name)
              `(,name (gensym[] ,(symbol-name name)))
              `(,(car name) (gensym[] (or ,(cadr name) "G"))))))
     ,@body))

(export
  (defmacro aif (test-form then-form &optional else-form)
    (with-gensyms (tmp)
      `(let ((,tmp ,test-form))
         (if ,tmp
           (let ((it ,tmp))
             ,then-form)
           ,else-form)))))

;;; Even in the BODY of this macro, variables that are bound to
;;; functions can still be used as the variable because Common Lisp is
;;; Lisp-2. That is, however, not a good aspect: Lisp-1 does not even
;;; need this macro!
(export
  (defmacro with-functions ((&rest function-application-forms) &body body)
    `(labels ,(mapcar #`(,(car a0) ,(cdr a0)
                          (funcall ,@a0))
                      function-application-forms)
       ,@body)))

(export
  (defun projected-find-if (pred key sequence &optional (failed nil))
    "The projected value of one of the SEQ's element that returns T when
     applied PRED is returned. FAILED is returned if no such element
     exists, which is defaulted to NIL.

     Use CL:FIND-IF instead if KEY is not needed."
    (with-functions ((pred x) (key x))
      (do ((seq sequence (tail seq)))
        ((zerop (length seq)) failed)
        (let ((projected (key (head seq))))
          (if (pred projected)
            (return projected)))))))
